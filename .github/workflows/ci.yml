name: CI

on: [push, pull_request]

jobs:
  # This job downloads and stores `cross` as an artifact, so that it can be
  # redownloaded across all of the jobs. Currently this copied pasted between
  # `ci.yml` and `deploy.yml`. Make sure to update both places when making
  # changes.
  install-cross:
    runs-on: ubuntu-latest
    steps:
      - uses: XAMPPRocky/get-github-release@f014caa45687655545637a005866289b3af8c69e # v1.0.4
        id: cross
        with:
          owner: rust-embedded
          repo: cross
          matches: ${{ matrix.platform }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: cross-${{ matrix.platform }}
          path: ${{ steps.cross.outputs.install_path }}
    strategy:
      matrix:
        platform: [linux-musl]

  windows:
    runs-on: windows-latest
    # Windows technically doesn't need this, but if we don't block windows on it
    # some of the windows jobs could fill up the concurrent job queue before
    # one of the install-cross jobs has started, so this makes sure all
    # artifacts are downloaded first.
    needs: install-cross
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
      - if: matrix.mingw_package
        uses: msys2/setup-msys2@7efe20baefed56359985e327d329042cde2434ff # v2
        with:
          release: false
          install: ${{ matrix.mingw_package }}
      - run: ci/set_rust_version.bash ${{ matrix.channel }} ${{ matrix.target }}
        shell: bash
      - run: ci/test.bash cargo ${{ matrix.target }}
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        channel: [stable, beta, nightly]
        target:
          - x86_64-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - i686-pc-windows-msvc
          - i686-pc-windows-gnu
        include:
          - target: x86_64-pc-windows-gnu
            mingw_package: mingw-w64-x86_64-gcc
          - target: i686-pc-windows-gnu
            mingw_package: mingw-w64-i686-gcc

  macos:
    runs-on: macos-latest
    # macOS isn't currently using this either, but see the note about Windows above.
    needs: install-cross
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
      - run: ci/set_rust_version.bash ${{ matrix.channel }} ${{ matrix.target }}
      - run: ci/test.bash cargo ${{ matrix.target }}

    strategy:
      fail-fast: false
      matrix:
        channel: [stable, beta, nightly]
        target:
          - x86_64-apple-darwin

  cc:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
      # Ensures --all-features builds correctly, the current logic will mean it
      # uses stock zlib, not cmake nor cc
      - run: |
          cargo test --all-features
          cargo run --manifest-path systest/Cargo.toml --all-features
      # Ensures zlib-ng builds and runs, though zlib-ng _could_ change internally
      # and not use all optimizations available to the CI runner, we do this here
      # just for x86_64-unknown-linux-gnu to validate a common target compiles
      # on a more recent compiler than the incredibly ancient one currently used by cross
      - run: |
          cargo test --no-default-features --features zlib-ng-no-cmake-experimental-community-maintained || echo "::warning::failed to build libz-ng with --features zlib-ng-no-cmake-experimental-community-maintained"
          cargo run --manifest-path systest/Cargo.toml --no-default-features --features zlib-ng-no-cmake-experimental-community-maintained || echo "::warning::failed to run systest with --features zlib-ng-no-cmake-experimental-community-maintained"
          

  # ensures packaging works
  package:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true
      - run: |
          cargo package --all-features
          cargo package --no-default-features --features zlib-ng-no-cmake-experimental-community-maintained
          cargo package --no-default-features --features zlib-ng

  linux:
    runs-on: ubuntu-latest
    needs: install-cross
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Download Cross
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: cross-linux-musl
          path: /tmp/
      - run: chmod +x /tmp/cross
      - run: echo RUSTFLAGS=${RUSTFLAGS}\ -Zlinker-features=-lld >> $GITHUB_ENV
        if: matrix.channel == 'nightly'
      - run: ci/set_rust_version.bash ${{ matrix.channel }} ${{ matrix.target }}
      - run: ci/test.bash /tmp/cross ${{ matrix.target }}

    strategy:
      fail-fast: false
      matrix:
        channel: [stable, beta, nightly]
        target:
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - arm-unknown-linux-gnueabihf
          - arm-unknown-linux-musleabihf
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - s390x-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl

  minimal-versions:
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - run: |
          rustup toolchain install nightly --profile minimal --no-self-update
          cargo +nightly update -Zminimal-versions

      - run: cargo build
      - run: cargo build --features zlib-ng --no-default-features
      - run: cargo build --no-default-features --features zlib-ng-no-cmake-experimental-community-maintained || echo "::warning::failed to build libz-ng with --features zlib-ng-no-cmake-experimental-community-maintained"


    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
          - macos-latest
          - ubuntu-latest
